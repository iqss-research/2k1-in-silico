golem::run_dev()
golem::run_dev()
golem::run_dev()
parser(test_normal_utils$assumedDistrChoices)
parser(test_normal_dt$assumedDistrChoices)
parse(test_normal_dt$assumedDistrChoices)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages("katex")
knit_with_parameters("~/Education/Harvard/2k1-in-silico/inst/app/www/dgp_distr_normx.Rmd")
unlink("inst/app/www/dgp_distr_normx_cache", recursive = TRUE)
unlink("inst/app/www/dgp_distr_normx_cache", recursive = TRUE)
knitr::knit2html(dgp_distr_normx.Rmd)
knitr::knit2html("inst/app/www/dgp_distr_normx.Rmd")
rmarkdown::render("inst/app/www/dgp_distr_normx.Rmd")
rmarkdown::render("inst/app/www/dgp_distr_normx.Rmd")
packageVersion('rmarkdown')
install.packages("rmarkdown")
install.packages("rmarkdown")
rmarkdown::render("inst/app/www/test_normx.Rmd")
rmarkdown::render("inst/app/www/test_normx.Rmd")
rmarkdown::render("inst/app/www/test_normx.Rmd")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages(shinycssloaders)
install.packages("shinycssloaders")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
library(fst)
install.packages("fst")
library(fst)
distrDF <- data.table::fread(app_sys("DistrNames.csv"),
encoding="UTF-8",
key = 'distrList')
distrDF <- data.table::fread("inst/DistrNames.csv",
encoding="UTF-8",
key = 'distrList')
write.fst(distrDF, "DistrNames.fst")
write.fst(distrDF, "inst/DistrNames.fst")
write.fst(distrDF, "inst/DistrNames.fst")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
test_fst <- fst::read_fst("inst/DistrNames.fst")
View(test_fst)
View(test_fst)
test_fst <- fst::read_fst("inst/DistrNames.fst")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module("dgp_tab")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
shiny::runApp(display.mode="showcase")
golem::run_dev()
golem::run_dev()
options(shiny.error = browser)
golem::run_dev()
options(shiny.error = recover)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
options(shiny.reactlog=TRUE)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
stderr()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
shinyintro::app("modules_demo")
shinyintro::app("modules_demo")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1()
runGov2k1()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1(display.mode="showcase")
runApp("2k1-in-silico", display.mode="showcase")
runApp("2k1-in-silico/R", display.mode="showcase")
runApp("C:/Users/natra/Documents/Education/Harvard/2k1-in-silico/R", display.mode="showcase")
?runApp
shinyApp(ui=app_ui(), server=app_server(), display.mode="showcase")
?testthat
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
distrNameOutput(),
cat("DGP: ",i)
)
}
library(shiny)
library(magrittr)
library(dplyr)
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
return(distrNameOutput)
}
dfd
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
return(distrNameOutput)
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
distrNameOutput(),
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
input$distrID
distrID
exit
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
paste0(tags$b("DGP: ") ,i)
)
}
})
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
print(output$distrNameOutput)
#testthat::expect_equal(
#  output$distrNameOutput,
#  paste0(tags$b("DGP: ") ,i)
#)
}
})
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
})
})
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
library(shiny)
library(profvis)
profvis(Gov2k1inSilico::runGov2k1())
profvis(runGov2k1())
profvis(Gov2k1inSilico::runGov2k1(), display.mode = 'normal')
profvis(Gov2k1inSilico::runGov2k1(display.mode='normal'))
profvis({Gov2k1inSilico::runGov2k1()})
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
golem::run_dev()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
git pull
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
golem::run_dev()
library(golem)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
Gov2k1inSilico::runGov2k1()
ls
golem::run_dev()
Gov2k1inSilico::runGov2k1()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
devtools::document()
devtools::document()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
round(stats::rnorm(1, 2),5)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
