"\\( \\hspace{30px} \\text{and} \\quad X_i\\beta = \\color{blue}{\\beta_0}", xStrs,"\\)")),
tags$p("\\( \\hspace{30px} Y_i \\perp \\!\\!\\! \\perp Y_j \\quad \\forall \\: i \\neq j \\)"),
)
} else {
div(tags$p(tags$b("Statistical Model ")),
tags$p(withMathJax(paste0("\\( \\hspace{30px} Y_i \\sim ", modelDistTex,"\\)"))),
tags$p(paste0("\\( \\hspace{30px}", modelParamTex,"\\)")),
tags$p("\\( \\hspace{30px} Y_i \\perp \\!\\!\\! \\perp Y_j \\quad \\forall \\: i \\neq j \\)"))}
} else if(type == "Likelihood"){
div(tags$p(tags$b(withMathJax("Likelihood for data \\(\\small y = (y_1, \\dots,y_n)\\) :"))),
tags$p(paste0(" \\(\\hspace{30px}{",smallLikTex,likelihoodTex,"}\\)")),
tags$p(tags$small("\\( \\hspace{30px} \\) where \\( k(y) \\) is an unknown function of the data.")),
tags$p(tags$b("Log Likelihood:")),
tags$p(paste0("\\(\\hspace{30px}{", smallLLTex, logLikelihoodTex," } \\)")))
} else if(type == "Estimation Uncertainty"){
div(
tags$p(tags$b("Estimation Uncertainty")),
tags$p(withMathJax(paste0("\\( \\hspace{30px} \\tilde{",paramTex,"} \\sim \\mathcal{N}(\\hat{",paramTex,"}, \\hat{V}(\\hat{",paramTex,"})) \\)")))
)
} else if(type == "Fundamental Uncertainty"){
### TODO: make this a bit cleaner
modelTilde <- gsub(paste0("\\",paramTex), paste0(" \\\\tilde{\\",paramTex,"}"), modelDistTex)
if(paramTex != intrParamTex){
modelTilde <- gsub(paste0("\\",intrParamTex), paste0(" \\\\tilde{\\",intrParamTex,"}"), modelTilde)
}
modelTilde <- gsub("\\\\sigma", " \\\\tilde{\\\\sigma}", modelTilde)
modelTildec <- gsub("_i", "_c", modelTilde)
modelParamTilde <- gsub(paste0("\\",paramTex), paste0(" \\\\tilde{\\",paramTex,"}"), modelParamTex)
modelParamTilde <- gsub(paste0("\\",intrParamTex), paste0(" \\\\tilde{\\",intrParamTex,"}"), modelParamTilde)
modelParamTilde <- gsub("\\\\sigma", " \\\\tilde{\\\\sigma}", modelParamTilde)
modelParamTilde <- gsub("\\\\gamma", " \\\\tilde{\\\\gamma}", modelParamTilde)
modelParamTildec <- gsub("_i", "_c", modelParamTilde)
if(pdfAddendum ==1) {
prefaceStr <- " X_c \\tilde{\\beta} = \\tilde{\\beta_0} "
ret <- div(tags$p(tags$b("Fundamental Uncertainty")),
tags$p(withMathJax(paste0("\\(  \\hspace{30px} \\,",modelParamTildec, "\\)"))),
tags$p(paste0("\\( \\, \\hspace{30px}  \\tilde{y}_c  \\sim",modelTildec," \\)")),
)
} else if(pdfAddendum ==2) {
if(!is.numeric(xValsSim[[1]])) {return(div())} else{
if(length(xValsSim) == 1) {
xStrs <-  paste0(" + \\tilde{\\beta_1} X_c")
} else {
xStrs <- paste(lapply(1:length(xValsSim), function(i){
paste0(" + \\tilde{\\beta_",i,"} X_{c,",i, "}")}), collapse = "")
}
numStrs <- paste(lapply(1:(length(xValsSim)), function(i){
paste0(" + \\tilde{\\beta_",i,"}(\\color{red}{ ", round(xValsSim[[i]],1), "})")}), collapse = "")
prefaceStr <- " X_c \\tilde{\\beta} = \\tilde{\\beta_0} "
ret <- div(tags$p(tags$b("Fundamental Uncertainty")),
tags$p(withMathJax(paste0("\\(  \\hspace{30px} \\,", modelParamTildec, "\\)"))),
tags$p(paste0("\\(  \\hspace{30px} \\",prefaceStr,xStrs, "\\)")),
tags$p(paste0("\\( \\hspace{30px} = \\tilde{\\beta_0}", numStrs,"\\)")),
tags$p(paste0("\\( \\, \\hspace{30px}  \\tilde{y}_c  \\sim",modelTildec," \\)")),
)}
} else {
ret <- div(tags$p(tags$b("Fundamental Uncertainty")),
tags$p(paste0("\\( \\, \\hspace{30px}  \\tilde{y}  \\sim",modelTilde," \\)")),
tags$p(withMathJax(ifelse(intrParamTex != paramTex,paste0(
"\\(  \\hspace{30px} \\, \\tilde{",intrParamTex,"} =\\tilde{",paramTex,"}", "\\)"),""))),
)
}
ret
} else stop("Unknown Markdown!")
}
parser(test_normal_utils$latexList)(nXValsAssumed = 2-1, type = "Model")
parser(test_normal_dt$latexList)(nXValsAssumed = 2-1, type = "Model")
parser(test_normal_utils$latexList)(type = "Likelihood")
parser(test_normal_dt$latexList)(type = "Likelihood")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
parser(test_normal_utils$assumedDistrChoices)
parser(test_normal_dt$assumedDistrChoices)
parse(test_normal_dt$assumedDistrChoices)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages("katex")
knit_with_parameters("~/Education/Harvard/2k1-in-silico/inst/app/www/dgp_distr_normx.Rmd")
unlink("inst/app/www/dgp_distr_normx_cache", recursive = TRUE)
unlink("inst/app/www/dgp_distr_normx_cache", recursive = TRUE)
knitr::knit2html(dgp_distr_normx.Rmd)
knitr::knit2html("inst/app/www/dgp_distr_normx.Rmd")
rmarkdown::render("inst/app/www/dgp_distr_normx.Rmd")
rmarkdown::render("inst/app/www/dgp_distr_normx.Rmd")
packageVersion('rmarkdown')
install.packages("rmarkdown")
install.packages("rmarkdown")
rmarkdown::render("inst/app/www/test_normx.Rmd")
rmarkdown::render("inst/app/www/test_normx.Rmd")
rmarkdown::render("inst/app/www/test_normx.Rmd")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
install.packages(shinycssloaders)
install.packages("shinycssloaders")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
library(fst)
install.packages("fst")
library(fst)
distrDF <- data.table::fread(app_sys("DistrNames.csv"),
encoding="UTF-8",
key = 'distrList')
distrDF <- data.table::fread("inst/DistrNames.csv",
encoding="UTF-8",
key = 'distrList')
write.fst(distrDF, "DistrNames.fst")
write.fst(distrDF, "inst/DistrNames.fst")
write.fst(distrDF, "inst/DistrNames.fst")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
test_fst <- fst::read_fst("inst/DistrNames.fst")
View(test_fst)
View(test_fst)
test_fst <- fst::read_fst("inst/DistrNames.fst")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::add_module("dgp_tab")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
shiny::runApp(display.mode="showcase")
golem::run_dev()
golem::run_dev()
options(shiny.error = browser)
golem::run_dev()
options(shiny.error = recover)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
options(shiny.reactlog=TRUE)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
stderr()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
shinyintro::app("modules_demo")
shinyintro::app("modules_demo")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1()
runGov2k1()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1(display.mode="showcase")
runApp("2k1-in-silico", display.mode="showcase")
runApp("2k1-in-silico/R", display.mode="showcase")
runApp("C:/Users/natra/Documents/Education/Harvard/2k1-in-silico/R", display.mode="showcase")
?runApp
shinyApp(ui=app_ui(), server=app_server(), display.mode="showcase")
?testthat
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
distrNameOutput(),
cat("DGP: ",i)
)
}
library(shiny)
library(magrittr)
library(dplyr)
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
return(distrNameOutput)
}
dfd
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
return(distrNameOutput)
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
distrNameOutput(),
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
input$distrID
distrID
exit
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
paste0(tags$b("DGP: ") ,i)
)
}
})
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
print(output$distrNameOutput)
#testthat::expect_equal(
#  output$distrNameOutput,
#  paste0(tags$b("DGP: ") ,i)
#)
}
})
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
})
})
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
library(shiny)
library(profvis)
profvis(Gov2k1inSilico::runGov2k1())
profvis(runGov2k1())
profvis(Gov2k1inSilico::runGov2k1(), display.mode = 'normal')
profvis(Gov2k1inSilico::runGov2k1(display.mode='normal'))
profvis({Gov2k1inSilico::runGov2k1()})
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
golem::run_dev()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
git pull
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
golem::run_dev()
library(golem)
golem::run_dev()
golem::run_dev()
