golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
stderr()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
shinyintro::app("modules_demo")
shinyintro::app("modules_demo")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1()
runGov2k1()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1(display.mode="showcase")
runApp("2k1-in-silico", display.mode="showcase")
runApp("2k1-in-silico/R", display.mode="showcase")
runApp("C:/Users/natra/Documents/Education/Harvard/2k1-in-silico/R", display.mode="showcase")
?runApp
shinyApp(ui=app_ui(), server=app_server(), display.mode="showcase")
?testthat
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
distrNameOutput(),
cat("DGP: ",i)
)
}
library(shiny)
library(magrittr)
library(dplyr)
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
return(distrNameOutput)
}
dfd
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
return(distrNameOutput)
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
distrNameOutput(),
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
browser()
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
input$distrID
distrID
exit
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
helperMakerNavbar(str = "DGPs and Probability"),
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
cat("DGP: ",i)
)
}
})
mod_dgp_tab_server <- function(id){
moduleServer(id, function(input, output, session){
ns <- session$ns
############################
# Probability Tab
############################
output$testdistrConfig <- renderText({
paste("Testing input ")
})
golem::cat_dev(file=stderr(), "Start of Mod Server")
output$distrNameOutput <- renderUI({
div(id = "DGPTitle",
tags$b("DGP: "), input$distrID,
title = "DGPs/Probability Tab"
)
})
})}
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
testthat::expect_equal(
output$distrNameOutput,
paste0(tags$b("DGP: ") ,i)
)
}
})
shiny::testServer(mod_dgp_tab_server,{
for (i in c("Normal (X)", "Poisson","Bernoulli (Logit, X)")){
session$setInputs(distrID = i)
print(output$distrNameOutput)
#testthat::expect_equal(
#  output$distrNameOutput,
#  paste0(tags$b("DGP: ") ,i)
#)
}
})
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
})
})
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
library(shiny)
library(profvis)
profvis(Gov2k1inSilico::runGov2k1())
profvis(runGov2k1())
profvis(Gov2k1inSilico::runGov2k1(), display.mode = 'normal')
profvis(Gov2k1inSilico::runGov2k1(display.mode='normal'))
profvis({Gov2k1inSilico::runGov2k1()})
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
golem::run_dev()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
git pull
Gov2k1inSilico::runGov2k1()
Gov2k1inSilico::runGov2k1()
golem::run_dev()
library(golem)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
Gov2k1inSilico::runGov2k1()
ls
golem::run_dev()
Gov2k1inSilico::runGov2k1()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
devtools::document()
devtools::document()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
round(stats::rnorm(1, 2),5)
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
distrDF <- fst::read_fst("inst/DistrNames.fst", as.data.table=TRUE)
View(distrDF)
View(distrDF)
View(distrDF)
golem::run_dev()
distrDF_test <- fst::read_fst("inst/DistrNames.fst", as.data.table=TRUE)
distrDF_test['paramList']
distrDF_test[,'paramList']
str_replace("\\\\beta_1", "\\\\", "\\")
stringr::str_replace("\\\\beta_1", "\\\\", "\\")
stringr::str_replace_all(c("\\\\beta_1", "\\\\gamma","\\beta_2"), "\\\\", "\\")
stringr::str_replace(c("\\\\beta_1", "\\\\gamma","\\beta_2"), "\\\\", "\\")
gsub("\\\\",')
)
d
vcvsdfd
)dvsd
gsub("\\\\","\\",distrDF_test$paramList)
sub("\\\\","\\",distrDF_test$paramList)
gsub("\\\\","\\",distrDF_test$paramList)
gsub("\,\\\\","\,\\",distrDF_test$paramList)
gsub(",\\\\",",\\",distrDF_test$paramList)
# distrDF <- distrDF %>%
#   mutate(QOIList = ifelse(QOIList=="Predicted Values,Expected Values,Sim.Parameter",
#                              "Predicted Values,Expected Values,Sim. Parameter",
#                              QOIList))
fst::write_fst(distrDF, "inst/DistrNames_orig.fst")
distrDF[,'paramList']
distrDF[,'paramList'] <- gsub(",\\\\",",\\",distrDF$paramList)
View(distrDF)
# distrDF <- distrDF %>%
#   mutate(QOIList = ifelse(QOIList=="Predicted Values,Expected Values,Sim.Parameter",
#                              "Predicted Values,Expected Values,Sim. Parameter",
#                              QOIList))
fst::write_fst(distrDF, "inst/DistrNames.fst")
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
