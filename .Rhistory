xVals = assumedXVals,
optimMethod = assumedDistrConfig$optimMethod,
nParams = numXAssumed + assumedDistrConfig$nNonXParams)
MLEResult$paramHat
mcListLL <- if (assumedDistrConfig$nVar > 1){
firstParamName <- capitalizeStr(
substr(assumedDistrConfig$paramTex, 2,
nchar(assumedDistrConfig$paramTex)))
if(!is.na(assumedDistrConfig$secondParamTex)){
secondParamName <- "Gamma"
c(lapply(0:(numXAssumed-1), function(i){paste0(firstParamName,i)} ),
secondParamName )
} else {
lapply(0:(numXAssumed-1), function(i){paste0(firstParamName,i)} )
}
}
marginalSelectedLL <- if(assumedDistrConfig$nCovar>1){unlist(sample(mcListLL, 1))}else("Beta0")
tmp <- which(mcListLL == marginalSelectedLL)
margNumLL <- if(length(tmp) == 0){1} else{tmp}
MLEResult <-  likelihoodEstimateFun(
chartDomain = parser(assumedDistrConfig$chartDomain)(numXAssumed + assumedDistrConfig$nNonXParams),
likelihoodFun = parser(assumedDistrConfig$likelihoodFun),
margNum = margNumLL,
outcome = outcomeData,
xVals = assumedXVals,
optimMethod = assumedDistrConfig$optimMethod,
nParams = numXAssumed + assumedDistrConfig$nNonXParams)
simX1 <- (-1)^2*.1
simX2 <- (-2)^2*.1
simX3 <- (-3)^2*.1
simX4 <- (-4)^2*.1
simXVals <- c(1, inputsClean(list(simX1=simX1,
simX2=simX2,
simX3=simX3,
simX4=simX4),
"simX",
numXAssumed-1))
MLEResult <-  likelihoodEstimateFun(
chartDomain = parser(assumedDistrConfig$chartDomain)(numXAssumed + assumedDistrConfig$nNonXParams),
likelihoodFun = parser(assumedDistrConfig$likelihoodFun),
margNum = margNumLL,
outcome = outcomeData,
xVals = assumedXVals,
optimMethod = assumedDistrConfig$optimMethod,
nParams = numXAssumed + assumedDistrConfig$nNonXParams)
outcomeData_file <- read.csv("C:/Users/natra/Documents/Technologies/R/2k1-in-silico/tests/test_samp_vals/outcomeData.csv")
outcomeData <- sample(outcomeData_file[outcomeData_file$distrID == distrID_rand,]$outcomeData, 1)
outcomeData <- as.numeric(strsplit(gsub('[{]|[}]', '', outcomeData), ',')[[1]])
min_param <- assumedDistrConfig$sliderMin
max_param <- assumedDistrConfig$sliderMax
byHand1 <- round(runif(1, min=min_param, max=max_param),3)
byHand2 <- round(runif(1, min=min_param, max=max_param),3)
byHand3 <- round(runif(1, min=min_param, max=max_param),3)
byHand4 <- round(runif(1, min=min_param, max=max_param),3)
byHand5 <- round(runif(1, min=min_param, max=max_param),3)
byHand6 <- round(runif(1, min=min_param, max=max_param),3)
assumedXChoice1 <-sample(unlist(xGenerationChoices), 1)
assumedXChoice2 <-sample(unlist(xGenerationChoices), 1)
assumedXChoice3 <-sample(unlist(xGenerationChoices), 1)
assumedXChoice4 <-sample(unlist(xGenerationChoices), 1)
numXAssumed <- ifelse((assumedDistrConfig$nCovar > 1),2,1)
simX1 <- (-1)^2*.1
simX2 <- (-2)^2*.1
simX3 <- (-3)^2*.1
simX4 <- (-4)^2*.1
simXVals <- c(1, inputsClean(list(simX1=simX1,
simX2=simX2,
simX3=simX3,
simX4=simX4),
"simX",
numXAssumed-1))
marginalSelectedLLF <- "X1"
#########################################################
# recreate MLEResult since difficult to save from model tab for testing
#########################################################
assumedXChoices <- inputsClean(list(assumedXChoice1=assumedXChoice1,
assumedXChoice2=assumedXChoice2,
assumedXChoice3=assumedXChoice3,
assumedXChoice4=assumedXChoice4),
"assumedXChoice", numXAssumed-1)
assumedXVals <- if(assumedDistrConfig$nCovar > 1){
xValGenerator(length(outcomeData),
assumedXChoices)} else {NULL}
mcListLL <- if (assumedDistrConfig$nVar > 1){
firstParamName <- capitalizeStr(
substr(assumedDistrConfig$paramTex, 2,
nchar(assumedDistrConfig$paramTex)))
if(!is.na(assumedDistrConfig$secondParamTex)){
secondParamName <- "Gamma"
c(lapply(0:(numXAssumed-1), function(i){paste0(firstParamName,i)} ),
secondParamName )
} else {
lapply(0:(numXAssumed-1), function(i){paste0(firstParamName,i)} )
}
}
marginalSelectedLL <- if(assumedDistrConfig$nCovar>1){unlist(sample(mcListLL, 1))}else("Beta0")
tmp <- which(mcListLL == marginalSelectedLL)
margNumLL <- if(length(tmp) == 0){1} else{tmp}
MLEResult <-  likelihoodEstimateFun(
chartDomain = parser(assumedDistrConfig$chartDomain)(numXAssumed + assumedDistrConfig$nNonXParams),
likelihoodFun = parser(assumedDistrConfig$likelihoodFun),
margNum = margNumLL,
outcome = outcomeData,
xVals = assumedXVals,
optimMethod = assumedDistrConfig$optimMethod,
nParams = numXAssumed + assumedDistrConfig$nNonXParams)
View(MLEResult)
MLEResult$paramHat
mvtnorm::rmvnorm(3, 3, as.matrix(MLEResult$paramVCov))
mvtnorm::rmvnorm(3, MLEResult$paramHat, as.matrix(MLEResult$paramVCov))
mvtnorm::rmvnorm(5, MLEResult$paramHat, as.matrix(MLEResult$paramVCov))
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL ) %>%
as.matrix(ncols=length(MLEResult$paramHat))
View(test_paramTilde)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL ) %>%
as.matrix(ncols=length(MLEResult$paramHat),
nrows=1000)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL ) %>%
matrix(ncols=length(MLEResult$paramHat),
nrows=1000)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL )
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL ) %>%
matrix(ncols=length(MLEResult$paramHat),
nrows=1000)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL ) %>%
as.matrix(ncols=length(MLEResult$paramHat),
nrows=1000)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL )
View(test_paramTilde)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL ) %>%
unlist() %>%
as.matrix(ncols=length(MLEResult$paramHat),
nrows=1000)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
as.vector()
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
as.vector() %>%
as.matrix(ncols=length(MLEResult$paramHat),
nrows=1000)
?matrix
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
as.vector() %>%
as.matrix(ncol=length(MLEResult$paramHat),
nrow=1000)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
unlist() %>%
as.matrix(ncol=length(MLEResult$paramHat),
byrow=TRUE)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
unlist() %>%
as.vector()
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
unlist() %>%
as.vector() %>%
as.matrix(ncol=length(MLEResult$paramHat),
byrow=TRUE)
View(test_paramTilde)
length(MLEResult$paramHat)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
unlist() %>%
as.vector() %>%
matrix(ncol=length(MLEResult$paramHat),
byrow=TRUE)
View(test_paramTilde)
test_intrTilde <- sapply(1:nrow(test_paramTilde),
function(a){assumedDistrConfig$transformFun(
paramTilde$value[a,], xVals = c(assumedXVals), DGP = F)})
test_intrTilde <- sapply(1:nrow(test_paramTilde),
function(a){assumedDistrConfig$transformFun(
test_paramTilde, xVals = c(assumedXVals), DGP = F)})
test_transformfun <- assumedDistrConfig$transformFun
test_intrTilde <- sapply(1:nrow(test_paramTilde),
function(a){assumedDistrConfig$transformFun(
test_paramTilde, xVals = c(assumedXVals), DGP = F)})
test_intrTilde <- sapply(1:nrow(test_paramTilde),
function(a){assumedDistrConfig$transformFun(
test_paramTilde[1,], xVals = c(assumedXVals), DGP = F)})
fullNormXParamTransform(test_paramTilde[1,], xVals = c(assumedXVals), DGP = F)
test_intrTilde <- sapply(1:nrow(test_paramTilde),
function(a){eval(assumedDistrConfig$transformFun)(
test_paramTilde[1,], xVals = c(assumedXVals), DGP = F)})
intrTildeCreator <- function(paramTilde, transformFun, xVals = c(1)){
intrTilde <- sapply(1:nrow(test_paramTilde), function(a){
transformFun(test_paramTilde[a,], xVals = c(xVals), DGP = F)})
return(test_paramTilde[1])
intrTilde <- if(!is.null(dim(test_paramTilde))){
intrTilde %>%  t()
} else {intrTilde}
}
intrTilde <- sapply(1:nrow(test_paramTilde), function(a){
transformFun(test_paramTilde[a,], xVals = c(xVals), DGP = F)})
intrTilde <- sapply(1:nrow(test_paramTilde), function(a){
assumedDistrConfig$transformFun(test_paramTilde[a,], xVals = c(xVals), DGP = F)})
intrTildeCreator <- function(paramTilde, transformFun, xVals = c(1)){
intrTilde <- sapply(1:nrow(paramTilde), function(a){transformFun(paramTilde[a,], xVals = c(xVals), DGP = F)})
return(intrTilde[1])
intrTilde <- if(!is.null(dim(intrTilde))){
intrTilde %>%  t()
} else {intrTilde}
}
test_intrTilde<- intrTildeCreator(test_paramTilde,parser(assumedDistrConfig$transformFun), simXVals)
intrTildeCreator <- function(paramTilde, transformFun, xVals = c(1)){
intrTilde <- sapply(1:nrow(paramTilde),
function(a){transformFun(paramTilde[a,], xVals = c(xVals), DGP = F)})
#return(intrTilde[1])
intrTilde <- if(!is.null(dim(intrTilde))){
intrTilde %>%  t()
} else {intrTilde}
}
test_intrTilde<- intrTildeCreator(test_paramTilde,parser(assumedDistrConfig$transformFun), simXVals)
View(test_intrTilde)
unlist(test_intrTilde)
test_intrTilde[:,1:5]
test_intrTilde[,1:5]
test_intrTilde[1:5,]
!any(is.na(test_intrTilde[1:5,]))
!any(is.null(test_intrTilde[1:5,]))
?t
t(test_intrTilde)
dim(t(test_intrTilde))
?%*%
simX1 <- (-1)^2*.1
simX2 <- (-2)^2*.1
simX3 <- (-3)^2*.1
simX4 <- (-4)^2*.1
simXVals <- c(1, inputsClean(list(simX1=simX1,
simX2=simX2,
simX3=simX3,
simX4=simX4),
"simX",
numXAssumed-1))
simXVals[2]
typeof(simXVals[2])
typeof(simXVals[1])
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
data.table(Name=c("Predicted Values",
"Probability Y > 1",
"Expected Values"
"Sim. Parameter"),
data.table(Name=c("Predicted Values",
"Probability Y > 1",
"Expected Values",
"Sim. Parameter"),
FunctionName=c("ycOutput",
"ycGrtOutput",
"expValsOutput",
"paramHistOutput")
)
data.table::data.table(Name=c("Predicted Values",
"Probability Y > 1",
"Expected Values",
"Sim. Parameter"),
FunctionName=c("ycOutput",
"ycGrtOutput",
"expValsOutput",
"paramHistOutput"))
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
unlist() %>%
as.vector() %>%
matrix(ncol=length(MLEResult$paramHat),
byrow=TRUE)
library(dplyr)
distrID_rand<-"Normal (X)"
distrConfig <- distrDF[.(distrID_rand)]
source("~/Technologies/R/2k1-in-silico/R/global.R", echo=TRUE)
defaultXChoices <- c("Normal B","Uniform A","Poisson C","Normal A", "Uniform B","Uniform C","Normal C", "Bernoulli A")
xLength <- 800
xWidth <- 1
set.seed(2001)
`allXConstant (1)` <- matrix(1, xLength, xWidth)
`allXBernoulli A` <- matrix(rbinom(n = xWidth*xLength, size = 1, prob = .5), xLength, xWidth)
`allXBernoulli B` <- matrix(rbinom(n = xWidth*xLength, size = 1, prob = .75), xLength, xWidth)
`allXBernoulli C` <- matrix(rbinom(n = xWidth*xLength, size = 1, prob = .25), xLength, xWidth)
`allXUniform A` <- matrix(runif(n = xWidth*xLength, min = 0, max =1), xLength, xWidth)
`allXUniform B` <- matrix(runif(n = xWidth*xLength, min = -1, max =1), xLength, xWidth)
`allXUniform C` <- matrix(runif(n = xWidth*xLength, min = 0, max =2), xLength, xWidth)
`allXNormal A` <- matrix(rnorm(n = xWidth*xLength, mean = 0, sd = 1), xLength, xWidth)
`allXNormal B` <- matrix(rnorm(n = xWidth*xLength, mean = 1, sd = 1), xLength, xWidth)
`allXNormal C` <- matrix(rnorm(n = xWidth*xLength, mean = 0, sd = 2), xLength, xWidth)
`allXPoisson A`<- matrix(rpois(n = xWidth*xLength,lambda = 1), xLength, xWidth)
`allXPoisson B`<- matrix(rpois(n = xWidth*xLength,lambda = 2), xLength, xWidth)
`allXPoisson C`<- matrix(rpois(n = xWidth*xLength,lambda = 3), xLength, xWidth)
selectedDist <- "Normal (X)"
selectedQOI <- "Predicted Values"
paramSliderWidth <- "225px"
xGenerationChoices <- c("Bernoulli A", "Bernoulli B", "Bernoulli C", "Uniform A",
"Uniform B", "Uniform C", "Normal A", "Normal B",
"Normal C", "Poisson A", "Poisson B", "Poisson C")
regMin <- -5
regMax <- 5
regStep <- .5
regStart <- 3
iqOrangeStr <- "#BF5803"
iqBlueStr <- "#3E77BB"
iqGrayStr <- "#2f2f2f"
cbPalette <- c("#56B4E9", "#009E73","#E69F00","#0072B2", "#D55E00", "#CC79A7", rep("#999999", 5))
baseColor <- cbPalette[1]
baseColor2 <- cbPalette[2]
baseColor3 <- cbPalette[3]
### OPTIONS ########################################
options(warn = -1,
spinner.color="#9a2b35",
spinner.size=0.7,
"launch.browser" = "T")#, shiny.fullstacktrace = T)
distrID_rand<-"Normal (X)"
distrConfig <- distrDF[.(distrID_rand)]
assumedDistrID_rand<-"Normal (X)"
assumedDistrConfig <- distrDF[.(assumedDistrID_rand)]
outcomeData_file <- read.csv("C:/Users/natra/Documents/Technologies/R/2k1-in-silico/tests/test_samp_vals/outcomeData.csv")
outcomeData <- sample(outcomeData_file[outcomeData_file$distrID == distrID_rand,]$outcomeData, 1)
outcomeData <- as.numeric(strsplit(gsub('[{]|[}]', '', outcomeData), ',')[[1]])
assumedXChoice1 <-sample(unlist(xGenerationChoices), 1)
assumedXChoice2 <-sample(unlist(xGenerationChoices), 1)
assumedXChoice3 <-sample(unlist(xGenerationChoices), 1)
assumedXChoice4 <-sample(unlist(xGenerationChoices), 1)
numXAssumed <- ifelse((assumedDistrConfig$nCovar > 1),2,1)
simX1 <- (-1)^2*.1
simX2 <- (-2)^2*.1
simX3 <- (-3)^2*.1
simX4 <- (-4)^2*.1
assumedXChoices <- inputsClean(list(assumedXChoice1=assumedXChoice1,
assumedXChoice2=assumedXChoice2,
assumedXChoice3=assumedXChoice3,
assumedXChoice4=assumedXChoice4),
"assumedXChoice", numXAssumed-1)
source("~/Technologies/R/2k1-in-silico/R/fct_probCalcs.R", echo=TRUE)
source("~/Technologies/R/2k1-in-silico/R/fct_distrLogic.R", echo=TRUE)
source("~/Technologies/R/2k1-in-silico/R/fct_simulation.R", echo=TRUE)
source("~/Technologies/R/2k1-in-silico/R/utils_ui_gen.R", echo=TRUE)
assumedXChoices <- inputsClean(list(assumedXChoice1=assumedXChoice1,
assumedXChoice2=assumedXChoice2,
assumedXChoice3=assumedXChoice3,
assumedXChoice4=assumedXChoice4),
"assumedXChoice", numXAssumed-1)
source("~/Technologies/R/2k1-in-silico/R/utils_gen.R", echo=TRUE)
assumedXChoices <- inputsClean(list(assumedXChoice1=assumedXChoice1,
assumedXChoice2=assumedXChoice2,
assumedXChoice3=assumedXChoice3,
assumedXChoice4=assumedXChoice4),
"assumedXChoice", numXAssumed-1)
assumedXVals <- if(assumedDistrConfig$nCovar > 1){
xValGenerator(length(outcomeData),
assumedXChoices)} else {NULL}
mcListLL <- if (assumedDistrConfig$nVar > 1){
firstParamName <- capitalizeStr(
substr(assumedDistrConfig$paramTex, 2,
nchar(assumedDistrConfig$paramTex)))
if(!is.na(assumedDistrConfig$secondParamTex)){
secondParamName <- "Gamma"
c(lapply(0:(numXAssumed-1), function(i){paste0(firstParamName,i)} ),
secondParamName )
} else {
lapply(0:(numXAssumed-1), function(i){paste0(firstParamName,i)} )
}
}
marginalSelectedLL <- if(assumedDistrConfig$nCovar>1){unlist(sample(mcListLL, 1))}else("Beta0")
tmp <- which(mcListLL == marginalSelectedLL)
margNumLL <- if(length(tmp) == 0){1} else{tmp}
MLEResult <-  likelihoodEstimateFun(
chartDomain = parser(assumedDistrConfig$chartDomain)(numXAssumed + assumedDistrConfig$nNonXParams),
likelihoodFun = parser(assumedDistrConfig$likelihoodFun),
margNum = margNumLL,
outcome = outcomeData,
xVals = assumedXVals,
optimMethod = assumedDistrConfig$optimMethod,
nParams = numXAssumed + assumedDistrConfig$nNonXParams)
source("~/Technologies/R/2k1-in-silico/R/fct_likelihood.R", echo=TRUE)
assumedXChoices <- inputsClean(list(assumedXChoice1=assumedXChoice1,
assumedXChoice2=assumedXChoice2,
assumedXChoice3=assumedXChoice3,
assumedXChoice4=assumedXChoice4),
"assumedXChoice", numXAssumed-1)
assumedXVals <- if(assumedDistrConfig$nCovar > 1){
xValGenerator(length(outcomeData),
assumedXChoices)} else {NULL}
mcListLL <- if (assumedDistrConfig$nVar > 1){
firstParamName <- capitalizeStr(
substr(assumedDistrConfig$paramTex, 2,
nchar(assumedDistrConfig$paramTex)))
if(!is.na(assumedDistrConfig$secondParamTex)){
secondParamName <- "Gamma"
c(lapply(0:(numXAssumed-1), function(i){paste0(firstParamName,i)} ),
secondParamName )
} else {
lapply(0:(numXAssumed-1), function(i){paste0(firstParamName,i)} )
}
}
marginalSelectedLL <- if(assumedDistrConfig$nCovar>1){unlist(sample(mcListLL, 1))}else("Beta0")
tmp <- which(mcListLL == marginalSelectedLL)
margNumLL <- if(length(tmp) == 0){1} else{tmp}
MLEResult <-  likelihoodEstimateFun(
chartDomain = parser(assumedDistrConfig$chartDomain)(numXAssumed + assumedDistrConfig$nNonXParams),
likelihoodFun = parser(assumedDistrConfig$likelihoodFun),
margNum = margNumLL,
outcome = outcomeData,
xVals = assumedXVals,
optimMethod = assumedDistrConfig$optimMethod,
nParams = numXAssumed + assumedDistrConfig$nNonXParams)
test_paramTilde <- read.csv("tests/test_samp_vals/test_paramTilde.csv",
nrows=1,
header = FALSE,
row.names=NULL) %>%
unlist() %>%
as.vector() %>%
matrix(ncol=length(MLEResult$paramHat),
byrow=TRUE)
intrTildeCreator <- function(paramTilde, transformFun, xVals = c(1)){
intrTilde <- sapply(1:nrow(paramTilde),
function(a){transformFun(paramTilde[a,], xVals = c(xVals), DGP = F)})
intrTilde <- if(!is.null(dim(intrTilde))){
intrTilde %>%  t()
} else {intrTilde}
}
View(fullNormXLikelihoodFun)
View(QOIDF)
test_intrTilde<- intrTildeCreator(test_paramTilde,parser(assumedDistrConfig$transformFun), simXVals)
simXVals <- c(1,inputsClean(input, "simX", numXAssumed-1))
simXVals <- c(1,inputsClean(list(simX1=simX1,
simX2=simX2,
simX3=simX3,
simX4=simX4),
"simX", numXAssumed-1))
test_intrTilde<- intrTildeCreator(test_paramTilde,parser(assumedDistrConfig$transformFun), simXVals)
expValCreator <- function(intrTilde,
model,
nSimDraws=1000){
if(is.null(intrTilde)){return(rep(NA, length(intrTilde)))}
intrTildeMat <- as.matrix(intrTilde)
# probably I can do this with sapply instead
intrTildeList <- lapply(seq_len(nrow(intrTildeMat)),
function(i) intrTildeMat[i,])
if(any(lapply(intrTilde,length) > 0)){
tmp <- lapply(intrTildeList, function(intrTildeVal){
sapply(1:100, function(a){model(intrTildeVal,1)})
}) %>%  unlist() %>%  matrix(nrow = nSimDraws)
rowSums(tmp)/100
}
else{
rep(NA, length(intrTilde))
}
}
test_expVals <- expValCreator(test_intrTilde, parser(assumedDistrConfig$drawFun))
test_expVals
golem::run_dev()
golem::run_dev()
golem::run_dev()
golem::run_dev()
